//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Scripts/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""currentActionMap"",
            ""id"": ""bb858eaf-b757-48f2-b42d-6e9137f6f6e8"",
            ""actions"": [
                {
                    ""name"": ""OnMove"",
                    ""type"": ""Value"",
                    ""id"": ""cd5cad16-7362-44cb-927b-3bd9bf8e4675"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""OnJump"",
                    ""type"": ""Button"",
                    ""id"": ""96bfbdec-4720-4de1-bb7f-4336784c16f2"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""OnDash"",
                    ""type"": ""Button"",
                    ""id"": ""1effeb39-5eee-43d0-ba8f-3129d4eab910"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Sprint"",
                    ""type"": ""Button"",
                    ""id"": ""497de52d-77db-43f0-8f4b-6f1bb60b45ed"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""aab710f7-4c07-476a-a600-f40403b9b36b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""door"",
                    ""type"": ""Button"",
                    ""id"": ""f8b4e471-6907-4903-a1dc-e5eb8925e150"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""2ea862dd-c965-41b8-b14a-4251de9efc37"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OnMove"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""ab6badfd-13e6-4e2c-9908-a0061e8409fd"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OnMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""6226e0c6-e93a-4b1d-b843-95a7a35b046c"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OnMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""3c265df7-bb6a-424a-ad36-fdae6b28e731"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OnMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""e32bb7d5-386f-4d50-8eb1-323a12091286"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OnMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""f41dcff0-b83c-402a-af23-98926a3a1a92"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OnJump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2abff2bd-3f10-4f85-b74c-8444f2b4198f"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OnDash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""89f1abf5-b9f0-4492-a984-4ffe4c0214cd"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a786430a-6327-4e41-a494-cf4b1316eec9"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e0d15f8a-7eae-4747-8e23-7728af817e6f"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""door"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // currentActionMap
        m_currentActionMap = asset.FindActionMap("currentActionMap", throwIfNotFound: true);
        m_currentActionMap_OnMove = m_currentActionMap.FindAction("OnMove", throwIfNotFound: true);
        m_currentActionMap_OnJump = m_currentActionMap.FindAction("OnJump", throwIfNotFound: true);
        m_currentActionMap_OnDash = m_currentActionMap.FindAction("OnDash", throwIfNotFound: true);
        m_currentActionMap_Sprint = m_currentActionMap.FindAction("Sprint", throwIfNotFound: true);
        m_currentActionMap_Look = m_currentActionMap.FindAction("Look", throwIfNotFound: true);
        m_currentActionMap_door = m_currentActionMap.FindAction("door", throwIfNotFound: true);
    }

    ~@PlayerInput()
    {
        UnityEngine.Debug.Assert(!m_currentActionMap.enabled, "This will cause a leak and performance issues, PlayerInput.currentActionMap.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // currentActionMap
    private readonly InputActionMap m_currentActionMap;
    private List<ICurrentActionMapActions> m_CurrentActionMapActionsCallbackInterfaces = new List<ICurrentActionMapActions>();
    private readonly InputAction m_currentActionMap_OnMove;
    private readonly InputAction m_currentActionMap_OnJump;
    private readonly InputAction m_currentActionMap_OnDash;
    private readonly InputAction m_currentActionMap_Sprint;
    private readonly InputAction m_currentActionMap_Look;
    private readonly InputAction m_currentActionMap_door;
    public struct CurrentActionMapActions
    {
        private @PlayerInput m_Wrapper;
        public CurrentActionMapActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @OnMove => m_Wrapper.m_currentActionMap_OnMove;
        public InputAction @OnJump => m_Wrapper.m_currentActionMap_OnJump;
        public InputAction @OnDash => m_Wrapper.m_currentActionMap_OnDash;
        public InputAction @Sprint => m_Wrapper.m_currentActionMap_Sprint;
        public InputAction @Look => m_Wrapper.m_currentActionMap_Look;
        public InputAction @door => m_Wrapper.m_currentActionMap_door;
        public InputActionMap Get() { return m_Wrapper.m_currentActionMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CurrentActionMapActions set) { return set.Get(); }
        public void AddCallbacks(ICurrentActionMapActions instance)
        {
            if (instance == null || m_Wrapper.m_CurrentActionMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CurrentActionMapActionsCallbackInterfaces.Add(instance);
            @OnMove.started += instance.OnOnMove;
            @OnMove.performed += instance.OnOnMove;
            @OnMove.canceled += instance.OnOnMove;
            @OnJump.started += instance.OnOnJump;
            @OnJump.performed += instance.OnOnJump;
            @OnJump.canceled += instance.OnOnJump;
            @OnDash.started += instance.OnOnDash;
            @OnDash.performed += instance.OnOnDash;
            @OnDash.canceled += instance.OnOnDash;
            @Sprint.started += instance.OnSprint;
            @Sprint.performed += instance.OnSprint;
            @Sprint.canceled += instance.OnSprint;
            @Look.started += instance.OnLook;
            @Look.performed += instance.OnLook;
            @Look.canceled += instance.OnLook;
            @door.started += instance.OnDoor;
            @door.performed += instance.OnDoor;
            @door.canceled += instance.OnDoor;
        }

        private void UnregisterCallbacks(ICurrentActionMapActions instance)
        {
            @OnMove.started -= instance.OnOnMove;
            @OnMove.performed -= instance.OnOnMove;
            @OnMove.canceled -= instance.OnOnMove;
            @OnJump.started -= instance.OnOnJump;
            @OnJump.performed -= instance.OnOnJump;
            @OnJump.canceled -= instance.OnOnJump;
            @OnDash.started -= instance.OnOnDash;
            @OnDash.performed -= instance.OnOnDash;
            @OnDash.canceled -= instance.OnOnDash;
            @Sprint.started -= instance.OnSprint;
            @Sprint.performed -= instance.OnSprint;
            @Sprint.canceled -= instance.OnSprint;
            @Look.started -= instance.OnLook;
            @Look.performed -= instance.OnLook;
            @Look.canceled -= instance.OnLook;
            @door.started -= instance.OnDoor;
            @door.performed -= instance.OnDoor;
            @door.canceled -= instance.OnDoor;
        }

        public void RemoveCallbacks(ICurrentActionMapActions instance)
        {
            if (m_Wrapper.m_CurrentActionMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICurrentActionMapActions instance)
        {
            foreach (var item in m_Wrapper.m_CurrentActionMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CurrentActionMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CurrentActionMapActions @currentActionMap => new CurrentActionMapActions(this);
    public interface ICurrentActionMapActions
    {
        void OnOnMove(InputAction.CallbackContext context);
        void OnOnJump(InputAction.CallbackContext context);
        void OnOnDash(InputAction.CallbackContext context);
        void OnSprint(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnDoor(InputAction.CallbackContext context);
    }
}
